c!
errors
response.parsed_body["errors"] == errors
response.parsed_body["errors"].to_json
response.parsed_body["errors"]
response.parsed_body
response.parsed_body.errors
response.parsed_body.errors[0]
response.parsed_body
response.body
c!
transfer.errors[:amount]
c!
transfer.errors
c!
account.errors
c
c!
c
account.errors
account.transactions
account
c
n
account.transactions
account.transactions.create!(counterparty_name: "Alice", counterparty_iban: "IBAN2", counterparty_bic: "BIC2", description: "Payment", amount_cents: 100)
account.transactions
c
n
c!
batch.size
batch
c!
Transactions.all.to_json
Transactions.all
Transactions.last
CreditTransfers.last
CreditTransfer.last
BankAccount.last
c
n
c!
service.errors
c!
bulk_request.total_cents
account.balance_cents
c
attributes["amount"]
attributes
c!
attributes["amount"]
attributes
c!
bulk_request.credit_transfers
bulk_request.total_cents
account.balance_cents
account
c!
BankAccount.last
BankAccount.lock.find_by!(iban: bulk_request.organization_iban)
bulk_request.organization_bic
bulk_request.organization_iban
c
n
c
n
c!
BankAccount.last
c!
c
c!
c
BankAccount.lock.find_by(iban: "IBAN1", bic: "BIC1")
BankAccount.lock!.find_by(iban: "IBAN1", bic: "BIC1")
BankAccount.find_by(iban: "IBAN1", bic: "BIC1")
BankAccount.find_by(iban: "IBAN1")
BankAccount.all
BankAccount.last
c!
e
n
c
n
      )
        bic:  bulk_request.organization_bic
        iban: bulk_request.organization_iban,
BankAccount.lock.find_by!(
BankAccount.last
bulk_request.organization_iban
c
c!
c
bulk_request.to_json
n
c!
c
c!
c
c!
CreditTransferRequest.new(attributes["credit_transfers"][0]).to_json
CreditTransferRequest.new(attributes["credit_transfers"][0])
CreditTransferRequest.new(attributes["credit_transfers"])
attributes["credit_transfers"]
attributes
c
c!
bulk_request.to_json
bulk_request
c
attributes
c
c!
bulk_request.to_json
bulk_request
c!
attributes
c
super(attributes)
new(json_hash)
JSON.parse(raw_json)
raw_json
c!
response.body
response
c!
("14.156".to_d * 100).round(0, :half_even).to_i
("14.156".to_d * 100).round(0, :half_even)
("14.156".to_d * 100).round
("14.154".to_d * 100).round
("14.155".to_d * 100).round
(amount.to_d * 100).round
(amount.to_d * 100).round(0, :half_even)
c!
transfer.errors
c!
bulk_request.errors[:base]
bulk_request.errors
c!
bulk_request.errors
c
c!
e
n
c!
c
n
c!
bulk_request.errors
bulk_request.errors.last
bulk_request.errors.first
bulk_request.errors.class
bulk_request.errors.to_json
bulk_request.errors[0]
bulk_request.errors
c
c!
raw_json.blank?
c!
bulk_request.errors[:credit_transfers]
c!
request_object.valid?
request_object
c!
errors
c!
c
response
c
c!
service.process
service
c!
response
response.errors
response
c
e
c!
e
c!
e
c
e
c
Transactions.first
Transactions[0]
Transactions.all
Transactions.insert_all!(batch)
c!
error
n
build_transaction_hashes(account)
c!
build_transaction_hashes(account)
batch_size
build_transaction_hashes(account)
c!
batch.map { |t| t.merge(bank_account_id: account.id) }
batch
c!
bulk_request.credit_transfers
c
c!
error
n
account.balance_cents < bulk_request.total_cents
n
c
service.process
c!
bulk_request.total_cents
account.balance_cents
n
account
c!
bulk_request.organization_iban
bulk_request.total_cents
bulk_request
c!
calculate_total_cents(transfers)
transfers
c!
transfers[0].amount
transfers[0].amount_cents
transfers[0]
processed_transfers
c!
(amount.to_d*100).to_i
amount.to_d*100.to_i
amount.to_d*100
amount.tod*100
amount
c!
(transfers[0].amount.to_d*100).to_i
transfers[0].amount.to_d*100
transfers[0].amount.to_d
transfers[0].amount_cents
transfers[0].amount
transfers[0]
c
c!
transfers[0].amount_cents
transfers[0].amount
c!
transfers[0].amount
transfers[0].amount_cents
transfers[0].to_json
transfers
processed_transfers
c!
service.errors
n
c
request_object.valid?
request_object
c!
